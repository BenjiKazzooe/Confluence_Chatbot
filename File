import os
import json
import logging
import time
from cryptography.fernet import Fernet
import requests
from requests.auth import HTTPBasicAuth
from tenacity import retry, wait_fixed, stop_after_attempt, RetryError

#  Logging konfigurieren 
log_handler = logging.FileHandler("security.log")
console_handler = logging.StreamHandler()
log_handler.setLevel(logging.DEBUG)
console_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
log_handler.setFormatter(formatter)
console_handler.setFormatter(formatter)
logging.getLogger().addHandler(log_handler)
logging.getLogger().addHandler(console_handler)
logging.getLogger().setLevel(logging.DEBUG)

def send_alert(message):
    logging.error(message)
    print(f"ALARM: {message}")

#  Konfigurationsdatei laden 
def load_config():
    config_path = "config.json"
    if not os.path.exists(config_path):
        logging.error("Konfigurationsdatei 'config.json' nicht gefunden. Erstelle eine Standarddatei.")
        default_config = {
            "CONFLUENCE_BASE_URL": "",
            "USERNAME": "",
            "API_TOKEN": ""
        }
        with open(config_path, "w") as config_file:
            json.dump(default_config, config_file, indent=4)
        print("Bitte füllen Sie die 'config.json' mit den benötigten Werten aus und starten Sie das Programm erneut.")
        exit(1)
    
    with open(config_path, "r") as config_file:
        return json.load(config_file)

config = load_config()

#  API-Anfrage mit Fehlerbehandlung 
@retry(stop=stop_after_attempt(5), wait=wait_fixed(30))
def api_request(method, url, **kwargs):
    headers = kwargs.get("headers", {})
    headers["Content-Type"] = "application/json"
    kwargs["headers"] = headers
    
    try:
        response = method(url, **kwargs)
        response.raise_for_status()
        logging.info(f"Erfolgreicher API-Call: {url} - Status: {response.status_code}")
        return response.json()
    except requests.exceptions.RequestException as e:
        status_code = getattr(e.response, "status_code", "Unbekannt")
        logging.error(f"Fehler bei API-Anfrage: {e}, Status-Code: {status_code}")
        send_alert(f"Fehler bei API-Anfrage: {e}, Status-Code: {status_code}")
        raise RetryError(f"Fehler bei der Anfrage: {e}")
    except RetryError as e:
        logging.error(f"Wiederholungsfehler bei API-Anfrage: {e}")
        send_alert(f"Wiederholungsfehler: {e}")
        return None

#  CLI-Menü für Benutzersteuerung 
def get_valid_input(prompt):
    while True:
        user_input = input(prompt).strip()
        if user_input:
            return user_input
        print("Eingabe darf nicht leer sein. Bitte erneut versuchen.")


def main():
    while True:
        print("\nWähle eine Aktion:")
        print("1: Seite suchen")
        print("2: Bestehende Seite bearbeiten")
        print("3: Neue Seite erstellen")
        print("4: Beenden")
        choice = get_valid_input("Gib die Nummer der gewünschten Aktion ein: ")
        
        if choice == "1":
            keyword = get_valid_input("Gib den Titel oder das Keyword ein: ")
            search_confluence_pages(keyword)
        elif choice == "2":
            while True:
                page_id = get_valid_input("Gib die Seiten-ID ein: ")
                if page_id.isdigit():
                    break
                print("Ungültige ID. Bitte eine Zahl eingeben.")
            new_title = get_valid_input("Neuer Titel: ")
            new_content = get_valid_input("Neuer Inhalt: ")
            edit_confluence_page(page_id, new_title, new_content)
        elif choice == "3":
            space_key = get_valid_input("Gib den Space-Key ein: ")
            title = get_valid_input("Seitentitel: ")
            content = get_valid_input("Seiteninhalt: ")
            create_new_confluence_page(space_key, title, content)
        elif choice == "4":
            print("Programm beendet.")
            break
        else:
            print("Ungültige Eingabe. Bitte erneut versuchen.")

if __name__ == "__main__":
    main()
